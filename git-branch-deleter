#!/usr/bin/env python3

# MIT License
#
# Copyright (c) 2019 Jussi Lind <jussi.lind@iki.fi>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import subprocess
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk


class Application:

    class MainWindow(Gtk.Window):

        def __init__(self):
            Gtk.Window.__init__(self, title="Git Branch Deleter")

            self._toggleColumnIndex = 2
            self.set_default_size(400, 200)
            self.set_border_width(5)

            sw = Gtk.ScrolledWindow()
            sw.set_border_width(10)
            sw.set_hexpand(True)
            sw.set_vexpand(True)

            self.applyButton = Gtk.Button.new_with_mnemonic("_Apply")
            self.applyButton.connect("clicked", self.onApplyClicked)
            self.applyButton.set_sensitive(False)

            self.listStore = Gtk.ListStore(str, str, bool)
            self.updateListStore()

            treeView = Gtk.TreeView(model=self.listStore)

            branchNameRendererText = Gtk.CellRendererText()
            branchNameText = Gtk.TreeViewColumn("Local Branch", branchNameRendererText, text=0)
            treeView.append_column(branchNameText)

            branchUseRendererText = Gtk.CellRendererText()
            branchUseText = Gtk.TreeViewColumn("Last Time Used", branchUseRendererText, text=1)
            treeView.append_column(branchUseText)

            rendererToggle = Gtk.CellRendererToggle()
            rendererToggle.connect("toggled", self.onCellToggled)
            columnToggle = Gtk.TreeViewColumn("Delete", rendererToggle, active=self._toggleColumnIndex)
            treeView.append_column(columnToggle)

            grid = Gtk.Grid()
            sw.add(treeView)
            grid.attach(sw, 0, 0, 12, 6)
            grid.attach(self.applyButton, 0, 13, 12, 1)
            self.add(grid)

        def atLeastOneChecked(self):
            for toggle in self.listStore:
                if toggle[self._toggleColumnIndex]:
                    return True
            return False

        def onCellToggled(self, widget, path):
            self.listStore[path][self._toggleColumnIndex] = not self.listStore[path][self._toggleColumnIndex]
            self.updateApplyButton()

        def onApplyClicked(self, button):
            dialog = Gtk.MessageDialog(parent=self, flags=0, message_type=Gtk.MessageType.QUESTION, buttons=Gtk.ButtonsType.YES_NO, text="Confirm Deletion")
            dialog.format_secondary_text("Delete selected branches?")
            response = dialog.run()
            if response == Gtk.ResponseType.YES:
                self.deleteSelectedBranches()
            dialog.destroy()

        def getBranches(self):
            try:
                def filterDeletableBranches(branch):
                    return "*" not in branch and not branch.isspace() and len(branch) > 0

                output = subprocess.check_output(["git", "branch", "--list", "--no-color"], universal_newlines=True)
                branches = output.split('\n')
                branches = [x.strip() for x in branches]
                return filter(filterDeletableBranches, branches)
            except Exception:
                return []

        def getBranchUse(self, branch):
            try:
                output = subprocess.check_output(["git", "log", branch, "--pretty=format:\"%cr\""], universal_newlines=True)
                return output.split('\n')[0].strip('"')
            except Exception:
                return ""

        def getSelectedBranches(self):
            branches = []
            for toggle in self.listStore:
                if toggle[self._toggleColumnIndex]:
                    branches.append(toggle[0])
            return branches

        def deleteSelectedBranches(self):
            for branch in self.getSelectedBranches():
                self.deleteBranch(branch)
            self.updateListStore()

        def deleteBranch(self, branch):
            try:
                subprocess.run(["git", "branch", "-d", branch], check=True)
            except Exception:
                dialog = Gtk.MessageDialog(parent=self, flags=0, message_type=Gtk.MessageType.ERROR, buttons=Gtk.ButtonsType.OK, text="Error")
                dialog.format_secondary_text("Failed to delete branch '{0}'".format(branch))
                dialog.run()
                dialog.destroy()

        def updateListStore(self):
            self.listStore.clear()
            for branch in self.getBranches():
                self.listStore.append([branch, self.getBranchUse(branch), False])
            self.updateApplyButton()

        def updateApplyButton(self):
            self.applyButton.set_sensitive(self.atLeastOneChecked())


    def __init__(self):
        self.mainWindow = Application.MainWindow()
        self.mainWindow.set_position(Gtk.WindowPosition.CENTER)
        self.mainWindow.connect("destroy", Gtk.main_quit)

    def run(self):
        self.mainWindow.show_all()
        Gtk.main()


def main():
    app = Application()
    app.run()


if __name__ == '__main__':
    main()
